diff --git a/src/main.rs b/src/main.rs
index 5284c41..d05cc34 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -1,181 +1,182 @@
 mod balances;
 mod proof_of_existence;
 mod support;
 mod system;
 
 use crate::support::Dispatch;
 
 // These are the concrete types we will use in our simple state machine.
 // Modules are configured for these types directly, and they satisfy all of our
 // trait requirements.
 mod types {
 	pub type AccountId = &'static str;
 	pub type Balance = u128;
 	pub type BlockNumber = u32;
 	pub type Nonce = u32;
 	pub type Extrinsic = crate::support::Extrinsic<AccountId, crate::RuntimeCall>;
 	pub type Header = crate::support::Header<BlockNumber>;
 	pub type Block = crate::support::Block<Header, Extrinsic>;
 	pub type Content = &'static str;
 }
 
 // These are all the calls which are exposed to the world.
 // Note that it is just an accumulation of the calls exposed by each module.
 pub enum RuntimeCall {
 	Balances(balances::Call<Runtime>),
 	ProofOfExistence(proof_of_existence::Call<Runtime>),
 }
 
 // This is our main Runtime.
 // It accumulates all of the different pallets we want to use.
 #[derive(Debug)]
 pub struct Runtime {
 	system: system::Pallet<Self>,
 	balances: balances::Pallet<Self>,
 	proof_of_existence: proof_of_existence::Pallet<Self>,
 }
 
 impl system::Config for Runtime {
 	type AccountId = types::AccountId;
 	type BlockNumber = types::BlockNumber;
 	type Nonce = types::Nonce;
 }
 
 impl balances::Config for Runtime {
 	type Balance = types::Balance;
 }
 
 impl proof_of_existence::Config for Runtime {
 	type Content = types::Content;
 }
 
 impl Runtime {
 	// Create a new instance of the main Runtime, by creating a new instance of each pallet.
 	fn new() -> Self {
 		Self {
 			system: system::Pallet::new(),
 			balances: balances::Pallet::new(),
 			proof_of_existence: proof_of_existence::Pallet::new(),
 		}
 	}
 
 	// Execute a block of extrinsics. Increments the block number.
 	fn execute_block(&mut self, block: types::Block) -> support::DispatchResult {
 		self.system.inc_block_number();
 		if block.header.block_number != self.system.block_number() {
 			return Err(&"block number does not match what is expected")
 		}
 		// An extrinsic error is not enough to trigger the block to be invalid. We capture the
 		// result, and emit an error message if one is emitted.
 		for (i, support::Extrinsic { caller, call }) in block.extrinsics.into_iter().enumerate() {
 			self.system.inc_nonce(&caller);
 			let _res = self.dispatch(caller, call).map_err(|e| {
 				eprintln!(
 					"Extrinsic Error\n\tBlock Number: {}\n\tExtrinsic Number: {}\n\tError: {}",
 					block.header.block_number, i, e
 				)
 			});
 		}
 		Ok(())
 	}
 }
 
 impl crate::support::Dispatch for Runtime {
 	type Caller = <Runtime as system::Config>::AccountId;
 	type Call = RuntimeCall;
 	// Dispatch a call on behalf of a caller. Increments the caller's nonce.
 	//
 	// Dispatch allows us to identify which underlying module call we want to execute.
 	// Note that we extract the `caller` from the extrinsic, and use that information
 	// to determine who we are executing the call on behalf of.
 	fn dispatch(
 		&mut self,
 		caller: Self::Caller,
 		runtime_call: Self::Call,
 	) -> support::DispatchResult {
 		// This match statement will allow us to correctly route `RuntimeCall`s
 		// to the appropriate pallet level function.
 		match runtime_call {
 			RuntimeCall::Balances(call) => {
 				self.balances.dispatch(caller, call)?;
 			},
 			RuntimeCall::ProofOfExistence(call) => {
 				self.proof_of_existence.dispatch(caller, call)?;
 			},
 		}
 		Ok(())
 	}
 }
 
 fn main() {
 	// Create a new instance of the Runtime.
 	// It will instantiate with it all the modules it uses.
 	let mut runtime = Runtime::new();
 
 	// Initialize the system with some initial balance.
 	runtime.balances.set_balance(&"alice", 100);
 
 	// Here are the extrinsics in our block.
 	// You can add or remove these based on the modules and calls you have set up.
 	let block_1 = types::Block {
 		header: support::Header { block_number: 1 },
 		extrinsics: vec![
 			support::Extrinsic {
 				caller: &"alice",
 				call: RuntimeCall::Balances(balances::Call::transfer { to: &"bob", amount: 20 }),
 			},
 			support::Extrinsic {
 				caller: &"alice",
 				call: RuntimeCall::Balances(balances::Call::transfer {
 					to: &"charlie",
 					amount: 20,
 				}),
 			},
 		],
 	};
 
+	/* TODO: Update the extrinsics below for the updated format after the macros. */
 	let block_2 = types::Block {
 		header: support::Header { block_number: 2 },
 		extrinsics: vec![
 			support::Extrinsic {
 				caller: &"alice",
 				call: RuntimeCall::ProofOfExistence(proof_of_existence::Call::CreateClaim {
 					claim: &"Hello, world!",
 				}),
 			},
 			support::Extrinsic {
 				caller: &"bob",
 				call: RuntimeCall::ProofOfExistence(proof_of_existence::Call::CreateClaim {
 					claim: &"Hello, world!",
 				}),
 			},
 		],
 	};
 
 	let block_3 = types::Block {
 		header: support::Header { block_number: 3 },
 		extrinsics: vec![
 			support::Extrinsic {
 				caller: &"alice",
 				call: RuntimeCall::ProofOfExistence(proof_of_existence::Call::RevokeClaim {
 					claim: &"Hello, world!",
 				}),
 			},
 			support::Extrinsic {
 				caller: &"bob",
 				call: RuntimeCall::ProofOfExistence(proof_of_existence::Call::CreateClaim {
 					claim: &"Hello, world!",
 				}),
 			},
 		],
 	};
 
 	// Execute the extrinsics which make up our blocks.
 	// If there are any errors, our system panics, since we should not execute invalid blocks.
 	runtime.execute_block(block_1).expect("invalid block");
 	runtime.execute_block(block_2).expect("invalid block");
 	runtime.execute_block(block_3).expect("invalid block");
 
 	// Simply print the debug format of our runtime state.
 	println!("{:#?}", runtime);
 }
diff --git a/src/proof_of_existence.rs b/src/proof_of_existence.rs
index f9d9059..35181ca 100644
--- a/src/proof_of_existence.rs
+++ b/src/proof_of_existence.rs
@@ -1,113 +1,114 @@
 use crate::support::DispatchResult;
 use core::fmt::Debug;
 use std::collections::BTreeMap;
 
 pub trait Config: crate::system::Config {
 	/// The type which represents the content that can be claimed using this pallet.
 	/// Could be the content directly as bytes, or better yet the hash of that content.
 	/// We leave that decision to the runtime developer.
 	type Content: Debug + Ord;
 }
 
 /// This is the Proof of Existence Module.
 /// It is a simple module that allows accounts to claim existence of some data.
 #[derive(Debug)]
 pub struct Pallet<T: Config> {
 	/// A simple storage map from content to the owner of that content.
 	/// Accounts can make multiple different claims, but each claim can only have one owner.
 	claims: BTreeMap<T::Content, T::AccountId>,
 }
 
+/* TODO: Add the `#[macros::call]` attribute here too. Make the changes needed to this pallet. */
 impl<T: Config> Pallet<T> {
 	/// Create a new instance of the Proof of Existence Module.
 	pub fn new() -> Self {
 		Self { claims: BTreeMap::new() }
 	}
 
 	/// Get the owner (if any) of a claim.
 	pub fn get_claim(&self, claim: &T::Content) -> Option<&T::AccountId> {
 		self.claims.get(&claim)
 	}
 
 	/// Create a new claim on behalf of the `caller`.
 	/// This function will return an error if someone already has claimed that content.
 	pub fn create_claim(&mut self, caller: T::AccountId, claim: T::Content) -> DispatchResult {
 		if self.claims.contains_key(&claim) {
 			return Err(&"this content is already claimed");
 		}
 		self.claims.insert(claim, caller);
 		Ok(())
 	}
 
 	/// Revoke an existing claim on some content.
 	/// This function should only succeed if the caller is the owner of an existing claim.
 	/// It will return an error if the claim does not exist, or if the caller is not the owner.
 	pub fn revoke_claim(&mut self, caller: T::AccountId, claim: T::Content) -> DispatchResult {
 		let owner = self.get_claim(&claim).ok_or("claim does not exist")?;
 		if caller != *owner {
 			return Err(&"this content is owned by someone else");
 		}
 		self.claims.remove(&claim);
 		Ok(())
 	}
 }
 
 // A public enum which describes the calls we want to expose to the dispatcher.
 // We should expect that the caller of each call will be provided by the dispatcher,
 // and not included as a parameter of the call.
 pub enum Call<T: Config> {
 	CreateClaim { claim: T::Content },
 	RevokeClaim { claim: T::Content },
 }
 
 /// Implementation of the dispatch logic, mapping from `POECall` to the appropriate underlying
 /// function we want to execute.
 impl<T: Config> crate::support::Dispatch for Pallet<T> {
 	type Caller = T::AccountId;
 	type Call = Call<T>;
 
 	fn dispatch(
 		&mut self,
 		caller: Self::Caller,
 		call: Self::Call,
 	) -> crate::support::DispatchResult {
 		match call {
 			Call::CreateClaim { claim } => {
 				self.create_claim(caller, claim)?;
 			},
 			Call::RevokeClaim { claim } => {
 				self.revoke_claim(caller, claim)?;
 			},
 		}
 		Ok(())
 	}
 }
 
 #[cfg(test)]
 mod test {
 	struct TestConfig;
 
 	impl super::Config for TestConfig {
 		type Content = &'static str;
 	}
 
 	impl crate::system::Config for TestConfig {
 		type AccountId = &'static str;
 		type BlockNumber = u32;
 		type Nonce = u32;
 	}
 
 	#[test]
 	fn basic_proof_of_existence() {
 		let mut poe = super::Pallet::<TestConfig>::new();
 		assert_eq!(poe.get_claim(&"Hello, world!"), None);
 		assert_eq!(poe.create_claim(&"alice", &"Hello, world!"), Ok(()));
 		assert_eq!(poe.get_claim(&"Hello, world!"), Some(&"alice"));
 		assert_eq!(
 			poe.create_claim(&"bob", &"Hello, world!"),
 			Err("this content is already claimed")
 		);
 		assert_eq!(poe.revoke_claim(&"alice", &"Hello, world!"), Ok(()));
 		assert_eq!(poe.create_claim(&"bob", &"Hello, world!"), Ok(()));
 	}
 }
