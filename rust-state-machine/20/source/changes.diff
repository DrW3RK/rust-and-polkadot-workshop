diff --git a/src/balances.rs b/src/balances.rs
index d9d8eea..d9a8600 100644
--- a/src/balances.rs
+++ b/src/balances.rs
@@ -1,97 +1,97 @@
 use num::traits::{CheckedAdd, CheckedSub, Zero};
 use std::collections::BTreeMap;
 
 /// The configuration trait for the Balances Module.
 /// Contains the basic types needed for handling balances.
 pub trait Config: crate::system::Config {
 	/// A type which can represent the balance of an account.
 	/// Usually this is a large unsigned integer.
 	type Balance: Zero + CheckedSub + CheckedAdd + Copy;
 }
 
 /// This is the Balances Module.
 /// It is a simple module which keeps track of how much balance each account has in this state
 /// machine.
 #[derive(Debug)]
 pub struct Pallet<T: Config> {
 	// A simple storage mapping from accounts to their balances.
 	balances: BTreeMap<T::AccountId, T::Balance>,
 }
 
 impl<T: Config> Pallet<T> {
 	// Create a new instance of the balances module.
 	pub fn new() -> Self {
 		Self { balances: BTreeMap::new() }
 	}
 
 	/// Set the balance of an account `who` to some `amount`.
 	pub fn set_balance(&mut self, who: T::AccountId, amount: T::Balance) {
 		self.balances.insert(who, amount);
 	}
 
 	/// Get the balance of an account `who`.
 	/// If the account has no stored balance, we return zero.
 	pub fn balance(&self, who: &T::AccountId) -> T::Balance {
 		*self.balances.get(who).unwrap_or(&T::Balance::zero())
 	}
 
 	/// Transfer `amount` from one account to another.
 	/// This function verifies that `from` has at least `amount` balance to transfer,
 	/// and that no mathematical overflows occur.
 	pub fn transfer(
 		&mut self,
 		caller: T::AccountId,
 		to: T::AccountId,
 		amount: T::Balance,
-	) -> Result<(), &'static str> {
+	) -> crate::support::DispatchResult {
 		let caller_balance = self.balance(&caller);
 		let to_balance = self.balance(&to);
 
 		let new_caller_balance = caller_balance.checked_sub(&amount).ok_or("Not enough funds.")?;
 		let new_to_balance = to_balance.checked_add(&amount).ok_or("Overflow")?;
 
 		self.balances.insert(caller, new_caller_balance);
 		self.balances.insert(to, new_to_balance);
 
 		Ok(())
 	}
 }
 
 #[cfg(test)]
 mod tests {
 	struct TestConfig;
 
 	impl crate::system::Config for TestConfig {
 		type AccountId = &'static str;
 		type BlockNumber = u32;
 		type Nonce = u32;
 	}
 
 	impl super::Config for TestConfig {
 		type Balance = u128;
 	}
 
 	#[test]
 	fn init_balances() {
 		let mut balances = super::Pallet::<TestConfig>::new();
 
 		assert_eq!(balances.balance(&"alice"), 0);
 		balances.set_balance(&"alice", 100);
 		assert_eq!(balances.balance(&"alice"), 100);
 		assert_eq!(balances.balance(&"bob"), 0);
 	}
 
 	#[test]
 	fn transfer_balance() {
 		let mut balances = super::Pallet::<TestConfig>::new();
 
 		assert_eq!(balances.transfer(&"alice", &"bob", 51), Err("Not enough funds."));
 
 		balances.set_balance(&"alice", 100);
 		assert_eq!(balances.transfer(&"alice", &"bob", 51), Ok(()));
 		assert_eq!(balances.balance(&"alice"), 49);
 		assert_eq!(balances.balance(&"bob"), 51);
 
 		assert_eq!(balances.transfer(&"alice", &"bob", 51), Err("Not enough funds."));
 	}
 }
diff --git a/src/main.rs b/src/main.rs
index f6aa54a..e40f194 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -1,59 +1,60 @@
 mod balances;
+mod support;
 mod system;
 
 // These are the concrete types we will use in our simple state machine.
 // Modules are configured for these types directly, and they satisfy all of our
 // trait requirements.
 mod types {
 	pub type AccountId = &'static str;
 	pub type Balance = u128;
 	pub type BlockNumber = u32;
 	pub type Nonce = u32;
 }
 
 // This is our main Runtime.
 // It accumulates all of the different pallets we want to use.
 #[derive(Debug)]
 pub struct Runtime {
 	system: system::Pallet<Self>,
 	balances: balances::Pallet<Self>,
 }
 
 impl system::Config for Runtime {
 	type AccountId = types::AccountId;
 	type BlockNumber = types::BlockNumber;
 	type Nonce = types::Nonce;
 }
 
 impl balances::Config for Runtime {
 	type Balance = types::Balance;
 }
 
 impl Runtime {
 	// Create a new instance of the main Runtime, by creating a new instance of each pallet.
 	fn new() -> Self {
 		Self { system: system::Pallet::new(), balances: balances::Pallet::new() }
 	}
 }
 
 fn main() {
 	let mut runtime = Runtime::new();
 	runtime.balances.set_balance(&"alice", 100);
 
 	// start emulating a block
 	runtime.system.inc_block_number();
 	assert_eq!(runtime.system.block_number(), 1);
 
 	// first transaction
 	runtime.system.inc_nonce(&"alice");
 	let _res = runtime.balances.transfer(&"alice", &"bob", 30).map_err(|e| eprintln!("{}", e));
 
 	// second transaction
 	runtime.system.inc_nonce(&"alice");
 	let _res = runtime
 		.balances
 		.transfer(&"alice", &"charlie", 20)
 		.map_err(|e| eprintln!("{}", e));
 
 	println!("{:#?}", runtime);
 }
diff --git a/src/support.rs b/src/support.rs
new file mode 100644
index 0000000..08dc1ea
--- /dev/null
+++ b/src/support.rs
@@ -0,0 +1,42 @@
+/// The most primitive representation of a Blockchain block.
+pub struct Block<Header, Extrinsic> {
+	/// The block header contains metadata about the block.
+	pub header: Header,
+	/// The extrinsics represent the state transitions to be executed in this block.
+	pub extrinsics: Vec<Extrinsic>,
+}
+
+/// We are using an extremely simplified header which only contains the current block number.
+/// On a real blockchain, you would expect to also find:
+/// - parent block hash
+/// - state root
+/// - extrinsics root
+/// - etc...
+pub struct Header<BlockNumber> {
+	pub block_number: BlockNumber,
+}
+
+/// This is an "extrinsic": literally an external message from outside of the blockchain.
+/// This simplified version of an extrinsic tells us who is making the call, and which call they are
+/// making.
+pub struct Extrinsic<Caller, Call> {
+	pub caller: Caller,
+	pub call: Call,
+}
+
+/// The Result type for our runtime. When everything completes successfully, we return `Ok(())`,
+/// otherwise return a static error message.
+pub type DispatchResult = Result<(), &'static str>;
+
+/// A trait which allows us to dispatch an incoming extrinsic to the appropriate state transition
+/// function call.
+pub trait Dispatch {
+	/// The type used to identify the caller of the function.
+	type Caller;
+	/// The state transition function call the caller is trying to access.
+	type Call;
+
+	/// This function takes a `caller` and the `call` they want to make, and returns a `Result`
+	/// based on the outcome of that function call.
+	fn dispatch(&mut self, caller: Self::Caller, call: Self::Call) -> DispatchResult;
+}
