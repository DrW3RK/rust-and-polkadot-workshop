diff --git a/src/balances.rs b/src/balances.rs
index 86018f8..90e409e 100644
--- a/src/balances.rs
+++ b/src/balances.rs
@@ -1,75 +1,76 @@
 use std::collections::BTreeMap;
 
 /// This is the Balances Module.
 /// It is a simple module which keeps track of how much balance each account has in this state
 /// machine.
+/* TODO: Add the derive macro to implement the `Debug` trait for `Pallet`. */
 pub struct Pallet {
 	// A simple storage mapping from accounts (`&'static str`) to their balances (`u128`).
 	balances: BTreeMap<&'static str, u128>,
 }
 
 impl Pallet {
 	/// Create a new instance of the balances module.
 	pub fn new() -> Self {
 		Self { balances: BTreeMap::new() }
 	}
 
 	/// Set the balance of an account `who` to some `amount`.
 	pub fn set_balance(&mut self, who: &'static str, amount: u128) {
 		self.balances.insert(who, amount);
 	}
 
 	/// Get the balance of an account `who`.
 	/// If the account has no stored balance, we return zero.
 	pub fn balance(&self, who: &'static str) -> u128 {
 		*self.balances.get(&who).unwrap_or(&0)
 	}
 
 	/// Transfer `amount` from one account to another.
 	/// This function verifies that `from` has at least `amount` balance to transfer,
 	/// and that no mathematical overflows occur.
 	pub fn transfer(
 		&mut self,
 		caller: &'static str,
 		to: &'static str,
 		amount: u128,
 	) -> Result<(), &'static str> {
 		let caller_balance = self.balance(&caller);
 		let to_balance = self.balance(&to);
 
 		let new_caller_balance = caller_balance.checked_sub(amount).ok_or("Not enough funds.")?;
 		let new_to_balance = to_balance.checked_add(amount).ok_or("Overflow")?;
 
 		self.balances.insert(caller, new_caller_balance);
 		self.balances.insert(to, new_to_balance);
 
 		Ok(())
 	}
 }
 
 #[cfg(test)]
 mod tests {
 	#[test]
 	fn init_balances() {
 		let mut balances = super::Pallet::new();
 
 		assert_eq!(balances.balance(&"alice"), 0);
 		balances.set_balance(&"alice", 100);
 		assert_eq!(balances.balance(&"alice"), 100);
 		assert_eq!(balances.balance(&"bob"), 0);
 	}
 
 	#[test]
 	fn transfer_balance() {
 		let mut balances = super::Pallet::new();
 
 		assert_eq!(balances.transfer(&"alice", &"bob", 51), Err("Not enough funds."));
 
 		balances.set_balance(&"alice", 100);
 		assert_eq!(balances.transfer(&"alice", &"bob", 51), Ok(()));
 		assert_eq!(balances.balance(&"alice"), 49);
 		assert_eq!(balances.balance(&"bob"), 51);
 
 		assert_eq!(balances.transfer(&"alice", &"bob", 51), Err("Not enough funds."));
 	}
 }
diff --git a/src/main.rs b/src/main.rs
index 707e8e0..860ca79 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -1,36 +1,39 @@
 mod balances;
 mod system;
 
 // This is our main Runtime.
 // It accumulates all of the different pallets we want to use.
+/* TODO: Add the derive macro to implement the `Debug` trait for `Runtime`. */
 pub struct Runtime {
 	system: system::Pallet,
 	balances: balances::Pallet,
 }
 
 impl Runtime {
 	// Create a new instance of the main Runtime, by creating a new instance of each pallet.
 	fn new() -> Self {
 		Self { system: system::Pallet::new(), balances: balances::Pallet::new() }
 	}
 }
 
 fn main() {
 	let mut runtime = Runtime::new();
 	runtime.balances.set_balance(&"alice", 100);
 
 	// start emulating a block
 	runtime.system.inc_block_number();
 	assert_eq!(runtime.system.block_number(), 1);
 
 	// first transaction
 	runtime.system.inc_nonce(&"alice");
 	let _res = runtime.balances.transfer(&"alice", &"bob", 30).map_err(|e| eprintln!("{}", e));
 
 	// second transaction
 	runtime.system.inc_nonce(&"alice");
 	let _res = runtime
 		.balances
 		.transfer(&"alice", &"charlie", 20)
 		.map_err(|e| eprintln!("{}", e));
+
+	/* TODO: Print the final runtime state after all transactions. */
 }
diff --git a/src/system.rs b/src/system.rs
index 00e6de8..d8424a2 100644
--- a/src/system.rs
+++ b/src/system.rs
@@ -1,50 +1,51 @@
 use std::collections::BTreeMap;
 
 /// This is the System Pallet.
 /// It handles low level state needed for your blockchain.
+/* TODO: Add the derive macro to implement the `Debug` trait for `Pallet`. */
 pub struct Pallet {
 	/// The current block number.
 	block_number: u32,
 	/// A map from an account to their nonce.
 	nonce: BTreeMap<&'static str, u32>,
 }
 
 impl Pallet {
 	/// Create a new instance of the System Pallet.
 	pub fn new() -> Self {
 		Self { block_number: 0, nonce: BTreeMap::new() }
 	}
 
 	/// Get the current block number.
 	pub fn block_number(&self) -> u32 {
 		self.block_number
 	}
 
 	// This function can be used to increment the block number.
 	// Increases the block number by one.
 	pub fn inc_block_number(&mut self) {
 		self.block_number += 1;
 	}
 
 	// Increment the nonce of an account. This helps us keep track of how many transactions each
 	// account has made.
 	pub fn inc_nonce(&mut self, who: &'static str) {
 		let nonce = *self.nonce.get(who).unwrap_or(&0);
 		let new_nonce = nonce + 1;
 		self.nonce.insert(who, new_nonce);
 	}
 }
 
 #[cfg(test)]
 mod test {
 	#[test]
 	fn init_system() {
 		let mut system = super::Pallet::new();
 		system.inc_block_number();
 		system.inc_nonce(&"alice");
 
 		assert_eq!(system.block_number(), 1);
 		assert_eq!(system.nonce.get(&"alice"), Some(&1));
 		assert_eq!(system.nonce.get(&"bob"), None);
 	}
 }
