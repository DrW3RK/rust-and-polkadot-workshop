diff --git a/src/balances.rs b/src/balances.rs
index 4519171..eacb2ef 100644
--- a/src/balances.rs
+++ b/src/balances.rs
@@ -1,81 +1,95 @@
 use num::traits::{CheckedAdd, CheckedSub, Zero};
 use std::collections::BTreeMap;
 
+/*
+	TODO: Combine all generic types and their trait bounds into a single `pub trait Config`.
+	When you are done, your `Pallet` can simply be defined with `Pallet<T: Config>`.
+*/
+
 /// This is the Balances Module.
 /// It is a simple module which keeps track of how much balance each account has in this state
 /// machine.
 #[derive(Debug)]
 pub struct Pallet<AccountId, Balance> {
 	// A simple storage mapping from accounts to their balances.
 	balances: BTreeMap<AccountId, Balance>,
 }
 
+/*
+	TODO: Update all of these functions to use your new configuration trait.
+*/
+
 impl<AccountId, Balance> Pallet<AccountId, Balance>
 where
 	AccountId: Ord,
 	Balance: Zero + CheckedSub + CheckedAdd + Copy,
 {
 	/// Create a new instance of the balances module.
 	pub fn new() -> Self {
 		Self { balances: BTreeMap::new() }
 	}
 
 	/// Set the balance of an account `who` to some `amount`.
 	pub fn set_balance(&mut self, who: AccountId, amount: Balance) {
 		self.balances.insert(who, amount);
 	}
 
 	/// Get the balance of an account `who`.
 	/// If the account has no stored balance, we return zero.
 	pub fn balance(&self, who: &AccountId) -> Balance {
 		*self.balances.get(who).unwrap_or(&Balance::zero())
 	}
 
 	/// Transfer `amount` from one account to another.
 	/// This function verifies that `from` has at least `amount` balance to transfer,
 	/// and that no mathematical overflows occur.
 	pub fn transfer(
 		&mut self,
 		caller: AccountId,
 		to: AccountId,
 		amount: Balance,
 	) -> Result<(), &'static str> {
 		let caller_balance = self.balance(&caller);
 		let to_balance = self.balance(&to);
 
 		let new_caller_balance = caller_balance.checked_sub(&amount).ok_or("Not enough funds.")?;
 		let new_to_balance = to_balance.checked_add(&amount).ok_or("Overflow")?;
 
 		self.balances.insert(caller, new_caller_balance);
 		self.balances.insert(to, new_to_balance);
 
 		Ok(())
 	}
 }
 
 #[cfg(test)]
 mod tests {
+	/*
+		TODO: Create a `struct TestConfig`, and implement `super::Config` on it with concrete types.
+		Use this struct to instantiate your `Pallet`.
+	*/
+
 	#[test]
 	fn init_balances() {
 		let mut balances = super::Pallet::<&'static str, u128>::new();
 
 		assert_eq!(balances.balance(&"alice"), 0);
 		balances.set_balance(&"alice", 100);
 		assert_eq!(balances.balance(&"alice"), 100);
 		assert_eq!(balances.balance(&"bob"), 0);
 	}
 
 	#[test]
 	fn transfer_balance() {
 		let mut balances = super::Pallet::<&'static str, u128>::new();
 
 		assert_eq!(balances.transfer(&"alice", &"bob", 51), Err("Not enough funds."));
 
 		balances.set_balance(&"alice", 100);
 		assert_eq!(balances.transfer(&"alice", &"bob", 51), Ok(()));
 		assert_eq!(balances.balance(&"alice"), 49);
 		assert_eq!(balances.balance(&"bob"), 51);
 
 		assert_eq!(balances.transfer(&"alice", &"bob", 51), Err("Not enough funds."));
 	}
 }
diff --git a/src/main.rs b/src/main.rs
index acd3ed7..bc74cb6 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -1,48 +1,54 @@
 mod balances;
 mod system;
 
 type AccountId = &'static str;
 type Balance = u128;
 
 // This is our main Runtime.
 // It accumulates all of the different pallets we want to use.
 #[derive(Debug)]
 pub struct Runtime {
 	system: system::Pallet<Self>,
 	balances: balances::Pallet<AccountId, Balance>,
 }
 
 impl system::Config for Runtime {
 	type AccountId = &'static str;
 	type BlockNumber = u32;
 	type Nonce = u32;
 }
 
+/*
+	TODO:
+	Implement the `balances::Config` trait you created on your `Runtime`.
+	Use `Self` to satisfy the generic parameter required for `balances::Pallet`.
+*/
+
 impl Runtime {
 	// Create a new instance of the main Runtime, by creating a new instance of each pallet.
 	fn new() -> Self {
 		Self { system: system::Pallet::new(), balances: balances::Pallet::new() }
 	}
 }
 
 fn main() {
 	let mut runtime = Runtime::new();
 	runtime.balances.set_balance(&"alice", 100);
 
 	// start emulating a block
 	runtime.system.inc_block_number();
 	assert_eq!(runtime.system.block_number(), 1);
 
 	// first transaction
 	runtime.system.inc_nonce(&"alice");
 	let _res = runtime.balances.transfer(&"alice", &"bob", 30).map_err(|e| eprintln!("{}", e));
 
 	// second transaction
 	runtime.system.inc_nonce(&"alice");
 	let _res = runtime
 		.balances
 		.transfer(&"alice", &"charlie", 20)
 		.map_err(|e| eprintln!("{}", e));
 
 	println!("{:#?}", runtime);
 }
